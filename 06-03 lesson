#include <iostream>
using namespace std;


///int fibonacci (int n){
 ///     if(n>0){
///        return n;
///      }
///      else{
///        return fibonacci(n-1)*fibonacci(n-2);
///      }
///    }
   
   const int MAX_SIZE = 100;

void displayArray(int arr[], int size) {
    if (size == 0) {
        cout << "Empty array\n";
        return;
    }
    cout << "Array elements : ";
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << "\n";
}

void insertElement(int arr[], int &size, int element, int position) {
    if (size >= MAX_SIZE || position < 0 || position > size) {
        cout << "Insert impossible.\n";
        return;
    }
    for (int i = size; i > position; --i) {
        arr[i] = arr[i - 1];
    }
    arr[position] = element;
    size++;
    cout << "Done.\n";
}

void deleteElement(int arr[], int &size, int position) {
    if (position < 0 || position >= size) {
        cout << "Delete impossible.\n";
        return;
    }
    for (int i = position; i < size - 1; ++i) {
        arr[i] = arr[i + 1];
    }
    size--;
    cout << "Element delete.\n";
}

void searchElement(int arr[], int size, int element) {
    for (int i = 0; i < size; ++i) {
        if (arr[i] == element) {
            cout << "Element found index " << i << ".\n";
            return;
        }
    }
    cout << "Element not found.\n";
}

void updateElement(int arr[], int size, int position, int newValue) {
    if (position < 0 || position >= size) {
        cout << "Update impossible.\n";
        return;
    }
    arr[position] = newValue;
    cout << "Element updated.\n";
}
   
   
   
   
   
   
   
   
int main() 
{
   /// int arr[5] = {1,2,3,4,5};
   /// int mat[3][3]={{1,2,3},{4,5,6},{7,8,9}};
    
   /// int length=sizeof(arr)/sizeof(arr[0]);
    
   // for(int i=0;i<length;i++)
   //{
   //       cout << arr[i] << " "<<;
   // }
    
   /// cout<<"Size of entire array "<<sizeof(arr)<<" bytes"<<endl;
   /// cout<<"Size of one element of the array "<<sizeof(arr[0])<<" bytes"<<endl;
    
   /// int rows = sizeof(mat)/sizeof(mat[0]);
    ///int cols = sizeof(mat[0])/sizeof(mat[0][0]);
    ///cout << "Number of rows and columns : "<< rows<<" and "<<cols<<endl;
    
   /// for(int j=0;j<rows;j++){
    ///  for (int k=0;k<cols;k++){
    ///    cout<<mat[j][k]<<" ";
    ///  }
    ///  cout<<endl;
  ///  }
    
   /// cout<<fibonacci(6);
 int arr[MAX_SIZE];
    int size = 0;
    int choix;

    do {
        cout << "\nMenu :\n";
        cout << "1. Afficher les éléments\n";
        cout << "2. Insérer un élément\n";
        cout << "3. Supprimer un élément\n";
        cout << "4. Rechercher un élément\n";
        cout << "5. Mettre à jour un élément\n";
        cout << "6. Quitter\n";
        cout << "Choix : ";
        cin >> choix;

        int element, position;

        switch (choix) {
            case 1:
                displayArray(arr, size);
                break;
            case 2:
                cout << "Entrez l'élément à insérer et la position : ";
                cin >> element >> position;
                insertElement(arr, size, element, position);
                break;
            case 3:
                cout << "Entrez la position de l'élément à supprimer : ";
                cin >> position;
                deleteElement(arr, size, position);
                break;
            case 4:
                cout << "Entrez l'élément à rechercher : ";
                cin >> element;
                searchElement(arr, size, element);
                break;
            case 5:
                cout << "Entrez la position et la nouvelle valeur : ";
                cin >> position >> element;
                updateElement(arr, size, position, element);
                break;
            case 6:
                cout << "Au revoir !\n";
                break;
            default:
                cout << "Choix invalide.\n";
        }
    } while (choix != 6);

    return 0;
    
}

   

    
